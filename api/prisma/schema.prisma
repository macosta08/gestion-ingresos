// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Avocado {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  name       String
  sku        String      @unique
  price      Float
  image      String
  attributes Attributes?
}

model Attributes {
  id          Int     @id @default(autoincrement())
  description String?
  shape       String?
  hardiness   String?
  taste       String?
  avocado     Avocado @relation(fields: [avocadoId], references: [id])
  avocadoId   Int     @unique
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Page {
  id           String   @id @default(cuid())
  name         String   @unique
  route        String   @unique
  isPublic     Boolean  @default(false)
  imageLink    String?
  customizable Boolean  @default(false)
  roles        Role[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Role {
  id        String   @id @default(cuid())
  name      String   @unique
  pages     Page[]
  icon      String?
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  deleted       Boolean   @default(false)
  enabled       Boolean   @default(true)
  email         String    @unique
  emailVerified DateTime?
  image         String?
  name          String
  role          Role      @relation(fields: [roleId], references: [id])
  roleId        String    @unique
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
