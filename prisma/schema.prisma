// ◮◮◮ GENERATED BY AURORA ◮◮◮
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id])
  userId             String  @unique

  @@unique([provider, providerAccountId])
}

model Page {
  id           String   @id @default(cuid())
  name         String   @unique
  route        String   @unique
  imageLink    String?
  isPublic     Boolean  @default(false)
  customizable Boolean  @default(false)
  roles        Role[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Role {
  id        String   @id @default(cuid())
  name      String   @unique
  icon      String?
  pages     Page[]
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
}

model User {
  id            String       @id @default(cuid())
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  name          String?
  lastName      String?
  telefono      String?
  deleted       Boolean      @default(false)
  enabled       Boolean      @default(true)
  role          Role?        @relation(fields: [roleId], references: [id])
  roleId        String?
  movimientos   Movimiento[]
  account       Account?
  sessions      Session[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Movimiento {
  id          String        @id @default(cuid())
  monto       String
  fecha       DateTime
  descripcion String?
  concepto    Enum_Concepto
  user        User?         @relation(fields: [userId], references: [id])
  userId      String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum Enum_Concepto {
  Ingreso
  Egreso
}
